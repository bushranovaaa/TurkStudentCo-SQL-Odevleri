*Soru 1: Invoice Tablosunda, Tüm Değerleri NULL Olan Kayıtların Sayısını Bulmak*  

*Sorgu:*  
```sql
SELECT COUNT(*)
FROM invoice
WHERE invoice_id IS NULL
    AND customer_id IS NULL
    AND invoice_date IS NULL
    AND billing_address IS NULL
    AND billing_city IS NULL
    AND billing_state IS NULL
    AND billing_country IS NULL
    AND billingpostal_code IS NULL
    AND total IS NULL;
```

*Açıklama:*  
- Bu sorgu, *invoice* tablosundaki *tüm sütunları NULL olan* kayıtları sayar.  
- *COUNT(*)* fonksiyonu, belirtilen koşulları sağlayan tüm satırları sayar.  

*Row Sayısı:*  
> *0 veya 1* (Veritabanındaki verilere bağlı olarak değişebilir.)  

---

*Soru 2: Total Değerlerinin İki Katını Görmek ve Eski Versiyonlarıyla Karşılaştırmak*  

*Sorgu:*  
```sql
SELECT invoice_id, total, total * 2 AS total_double
FROM invoice
ORDER BY total_double DESC;
```

*Açıklama:*  
- *total* sütununun *iki katını* alarak *total_double* adında yeni bir sütun oluşturur.  
- *ORDER BY total_double DESC* ifadesi ile sonuçları büyükten küçüğe sıralar.  

*Row Sayısı:*  
> *1 - 412* (Veritabanındaki toplam fatura sayısına göre değişebilir.)  

---
*Soru 3: Adres Kolonundaki Verileri Soldan 3 Karakter ve Sağdan 4 Karakter Alarak Birleştirmek ve "Açık Adres" Olarak Yazmak*  

*Sorgu:*  
```sql
SELECT CONCAT(SUBSTRING(billing_address FROM 1 FOR 3), 
              SUBSTRING(billing_address FROM LENGTH(billing_address) - 3 FOR 4)) AS "Açık Adres"
FROM invoice
WHERE invoice_date >= '2013-08-01' 
  AND invoice_date < '2013-09-01';
```

*Açıklama:*  
- *billing_address* sütunundaki verinin *ilk 3* ve *son 4* karakterini alır.  
- *CONCAT* fonksiyonu ile bu iki parçayı birleştirerek *"Açık Adres"* sütunu oluşturur.  
- *WHERE invoice_date >= '2013-08-01' AND invoice_date < '2013-09-01'* ile *Ağustos 2013* kayıtları filtrelenir.  

*Row Sayısı:*  
> *1 - 7* (2013 Ağustos ayında kaç fatura kesildiğine bağlı olarak değişebilir.)  
